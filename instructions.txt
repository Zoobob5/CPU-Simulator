ADDI 1 0 5    # $r1 = $r0 + 5  (After this instruction, $r1 = 5)
ADDI 2 0 10   # $r2 = $r0 + 10 (After this instruction, $r2 = 10)
ADD 3 1 2     # $r3 = $r1 + $r2 (After the above, $r3 = 15)
SUB 4 3 2     # $r4 = $r3 - $r2 (After ADD, $r4 = 5)
ADDI 5 4 5    # $r5 = $r4 + 5  (After SUB, $r5 = 10)
SUBI 6 5 3    # $r6 = $r5 - 3  (After ADDI, $r6 = 7)
SLT 7 2 3     # $r7 = ($r2 < $r3) (Comparing $r2 = 10, $r3 = 15, so $r7 should be 1)
BNE 1 2 2     # If $r1 != $r2, branch to instruction 2 (this will not branch)
BNE 1 2 -2    # If $r1 != $r2, branch back to instruction 2 (loop)
LW 8 0 0      # $r8 = MEM[$r0 + 0] (Load from address 0)
SW 8 0 0      # MEM[$r0 + 0] = $r8 (Store $r8 at address 0)
